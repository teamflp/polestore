{% extends 'base.html.twig' %}

{% block title %}Récapitulatif{% endblock %}

{% block body %}
<h1>Récapitulatif de votre commande</h1>
<hr>
<div class="row">
    <div class="col-md-6">
        <div class="row">
            {% if delivery is not null %} {# Vérification que la variable delivery est définie #}
                <div class="col-md-12 form-check bg-light mb-2 pt-2">
                    <p><i class="fas fa-map-marker-alt"></i><b> Adresse de livraison</b></p>
                    {{ delivery|raw }} {# Utilisation de la variable delivery #}<br>
                </div>
                <div class="col-md-12 form-check bg-light mb-2 pt-2">
                    <p><i class="fas fa-map-marker-alt"></i><b> Adresse de facturation</b></p>
                    {{ delivery|raw }}<br>
                </div>
            {% endif %}
            {% if carrier is not null %}
                <div class="col-md-12 form-check bg-light pb-4 pt-2">
                    <p><i class="fas fa-truck"></i><b> Transporteur</b></p>
                    {{ carrier.name|join('<br>')|raw }}
                    {{ carrier.description|join('<br>')|raw }}
                    {{ (carrier.price / 100)|number_format(2, ',', ',') }} €
                </div>
            {% endif %}
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-2"><b>Ma commande</b></div>
        <hr>
        {% set total = 0 %}

        {% for key, product in cart %}
            <div class="row {{ key > 0 ? 'mt-2' }}">
                <div class="col-md-3">
                    <img src="{{ asset('uploads/' ~ product.product.illustration) }}" alt="{{ product.product.name }}" class="img-fluid">
                </div>
                <div class="col-md-5 my-auto">
                    <b>{{ product.product.name }}</b><br>
                    <small>{{ product.product.subtitle }}</small>
                </div>
                <div class="col-md-4 my-auto">
                    x{{ product.quantity }} - {{ ((product.product.price * product.quantity) / 100)|number_format(2, ',', ',')}} €
                </div>
                <hr>
            </div>
            {% set total = total + (product.product.price * product.quantity) %}
        {% endfor %}

        <hr>

        <div class="col-md-12">
            <strong>Sous-total: </strong>{{ (total / 100) | number_format(2, '.', '.') }} €<br>
            {% if carrier is not null %}
                <strong>Livraison : </strong>{{ (carrier.price / 100)|number_format(2, '.', '.') }} €<br>
            {% endif %}
            <strong>Total     : </strong>{{ ((total + (carrier.price ?? 0)) / 100)|number_format(2, '.', '.') }} €
        </div>
    </div>

    <div class="col-md-6">
        <a href="{{ path('cart') }}" class="w3-btn w3-green btn-block w-100 mt-3">Modifier ma commande</a>
    </div>
    <div class="col-md-6">
        <a class="w3-btn w3-green btn-block w-100 mt-3" id="checkout-button">Payer ma commande | {{ ((total + (carrier.price ?? 0)) / 100)|number_format(2, '.', '.') }} €</a>
    </div>
</div>
{% endblock %}


{% block javascripts %}
    <script src="https://js.stripe.com/v3/"></script>

    <script>

        document.addEventListener("DOMContentLoaded", function() {
            // Créer une instance de Stripe avec votre clé d'API secrète
            const stripe = Stripe('pk_test_51MctScAfpYZJnEmG2TCPKFZMzxHFVnEUK6kVykeQzYPXJukwwdobTLibk0dguqodDtdkPjg6TCYxL474jOT7QEHZ00UAHg1COB');

            // Récupérer le bouton de paiement
            const checkoutButton = document.getElementById('checkout-button');

            // Ajouter un écouteur d'événements sur le bouton de paiement
            checkoutButton.addEventListener('click', async () => {
                try {
                    const response = await fetch("/commande/create-session/{{ ref }}", { method: "POST" });
                    const session = await response.json();

                    if (session.error === 'order') {
                        // Rediriger l'utilisateur vers une page spécifique pour traiter l'erreur
                        window.location.replace ('{{ path('order') }}');
                    } else {
                        // Rediriger l'utilisateur vers la page de paiement de Stripe
                        const result = await stripe.redirectToCheckout({ sessionId: session.id });
                    }

                    // Afficher une alerte si une erreur est survenue lors du traitement de la commande
                    if (result.error) {
                        alert(result.error.message);
                    }
                } catch (error) {
                    console.error("Error", error);
                }
            });
        });

    </script>
{% endblock %}
